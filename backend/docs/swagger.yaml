openapi: 3.0.0
info:
  title: awesomeApp API
  description: REST API for awesomeApp
  version: 0.0.1
servers:
  - url: http://0.0.0.0:8888/api/v1
paths:
  /users:
    get:
      summary: Returns a list of users.
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        '500':
          description: Unexpected eror
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/{id}:
    get:
      summary: Returns info for a specific user
      parameters:
        - name: id
          in: path
          required: true
          description: the ID of the user to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: "A JSON user object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Unexpected eror
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /register:
    post:
      summary: Add a new user via signup
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        '200':
          description: The created user object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /login:
    post:
      summary: Authorize login requests to the admin portal
      requestBody:
        description: Admin credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Creds"
      responses:
        '200':
          description: The created user object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccess"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    User:
      type: object
      required:
        - id
        - first_name
        - last_name
        - email
        - username
      properties:
        id:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        username:
          type: string
        role:
          type: string
          enum: [user, admin]
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Error:
      type: object
      required:
        - error
        - status
      properties:
        error:
          type: string
        status:
          type: integer
          format: int32
    NewUser:
      type: object
      required:
        - first_name
        - last_name
        - email
        - username
        - password
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
    Creds:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    LoginSuccess:
      type: object
      required:
        - status
      properties:
        status:
          type: boolean